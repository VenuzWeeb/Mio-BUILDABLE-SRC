//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\Primo\Downloads\Deobf\Minecraft-Deobfuscator3000-master\1.12 stable mappings"!

// 
// Decompiled by Procyon v0.5.36
// 

package il.dev.mio.mod.modules.exploit;

import java.io.Writer;
import java.io.PrintWriter;
import java.io.FileWriter;
import java.io.File;
import java.util.Iterator;
import il.dev.mio.mod.command.Command;
import com.mojang.realmsclient.gui.ChatFormatting;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.util.math.Vec3d;
import net.minecraft.entity.Entity;
import java.util.HashMap;
import il.dev.mio.mod.gui.clickgui.setting.Setting;
import il.dev.mio.mod.modules.Module;

public class TPCoordLogger extends Module
{
    private Setting<Boolean> saveCoords;
    private HashMap<Entity, Vec3d> knownPlayers;
    private HashMap<String, Vec3d> tpdPlayers;
    private int numTicks;
    private int numForgetTicks;
    
    public TPCoordLogger() {
        super("TPCoordLogger", "New exploit.", Category.EXPLOIT, false, false, false);
        this.saveCoords = (Setting<Boolean>)this.register(new Setting("SaveToFile", true));
        this.knownPlayers = new HashMap<Entity, Vec3d>();
        this.tpdPlayers = new HashMap<String, Vec3d>();
        this.numTicks = 0;
        this.numForgetTicks = 0;
    }
    
    @Override
    public void onUpdate() {
        if (this.numTicks >= 50) {
            this.numTicks = 0;
            for (final Entity entity : TPCoordLogger.mc.world.loadedEntityList) {
                if (entity instanceof EntityPlayer && !entity.getName().equals(TPCoordLogger.mc.player.getName())) {
                    final Vec3d playerPos = new Vec3d(entity.posX, entity.posY, entity.posZ);
                    if (this.knownPlayers.containsKey(entity) && Math.abs(this.knownPlayers.get(entity).distanceTo(playerPos)) > 50.0 && Math.abs(TPCoordLogger.mc.player.getPositionVector().distanceTo(playerPos)) > 100.0 && (!this.tpdPlayers.containsKey(entity.getName()) || this.tpdPlayers.get(entity.getName()) != playerPos)) {
                        Command.sendMessage(ChatFormatting.WHITE + entity.getName() + ChatFormatting.GRAY + " has TP'd to " + ChatFormatting.WHITE + vectorToString(playerPos, false));
                        this.saveFile(vectorToString(playerPos, false), entity.getName());
                        this.knownPlayers.remove(entity);
                        this.tpdPlayers.put(entity.getName(), playerPos);
                    }
                    this.knownPlayers.put(entity, playerPos);
                }
            }
        }
        if (this.numForgetTicks >= 9000000) {
            this.tpdPlayers.clear();
        }
        ++this.numTicks;
        ++this.numForgetTicks;
    }
    
    public static String vectorToString(final Vec3d vector, final boolean includeY) {
        final StringBuilder builder = new StringBuilder();
        builder.append('(');
        builder.append((int)Math.floor(vector.x));
        builder.append(", ");
        if (includeY) {
            builder.append((int)Math.floor(vector.y));
            builder.append(", ");
        }
        builder.append((int)Math.floor(vector.z));
        builder.append(")");
        return builder.toString();
    }
    
    public void saveFile(final String pos, final String name) {
        if (this.saveCoords.getValue()) {
            try {
                final File file = new File("./hvhlegend/loggedCoords.txt");
                file.getParentFile().mkdirs();
                final PrintWriter writer = new PrintWriter(new FileWriter(file, true));
                final String ip = TPCoordLogger.mc.isSingleplayer() ? "singleplayer" : TPCoordLogger.mc.getCurrentServerData().serverIP;
                writer.println("(Teleport) IGN: " + name + " Pos: " + pos + "Server: " + ip);
                writer.close();
            }
            catch (Exception ex) {}
        }
    }
}
